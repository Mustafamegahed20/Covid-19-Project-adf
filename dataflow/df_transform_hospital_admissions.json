{
	"name": "df_transform_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admissions_row",
						"type": "DatasetReference"
					},
					"name": "hospitaladmissionssource"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_country",
						"type": "DatasetReference"
					},
					"name": "lookupcountry"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date",
						"type": "DatasetReference"
					},
					"name": "dimdatelookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admisions_daily",
						"type": "DatasetReference"
					},
					"name": "Dailysink"
				},
				{
					"dataset": {
						"referenceName": "df_processed_Hospital_admissions_weakly",
						"type": "DatasetReference"
					},
					"name": "weaklySink"
				}
			],
			"transformations": [
				{
					"name": "selectrequiredfields"
				},
				{
					"name": "countrylookup"
				},
				{
					"name": "deleteunwantedculmn"
				},
				{
					"name": "splitOndate"
				},
				{
					"name": "requireddailycounts"
				},
				{
					"name": "requiredweaklycounts"
				},
				{
					"name": "DeriveECDCYEARWEEK"
				},
				{
					"name": "AggDimDate"
				},
				{
					"name": "joinwithDate"
				},
				{
					"name": "removeonefiledofecde"
				},
				{
					"name": "pivotdailycounts"
				},
				{
					"name": "pivotweeklycounts"
				},
				{
					"name": "sortWeakly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "selectweekly"
				},
				{
					"name": "selectdaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> hospitaladmissionssource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> lookupcountry",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimdatelookup",
				"hospitaladmissionssource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrequiredfields",
				"selectrequiredfields, lookupcountry lookup(selectrequiredfields@country == lookupcountry@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> countrylookup",
				"countrylookup select(mapColumn(",
				"          country = selectrequiredfields@country,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> deleteunwantedculmn",
				"deleteunwantedculmn split(or(indicator == 'Daily hospital occupancy', indicator == 'Daily ICU occupancy'),",
				"     disjoint: false) ~> splitOndate@(Dailycounts, weaklycounts)",
				"splitOndate@Dailycounts select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date,",
				"          value,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> requireddailycounts",
				"splitOndate@weaklycounts select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> requiredweaklycounts",
				"dimdatelookup derive(ECDC_Year_Week = year + '-W'+ lpad(week_of_year,2,'0')) ~> DeriveECDCYEARWEEK",
				"DeriveECDCYEARWEEK aggregate(groupBy(ECDC_Year_Week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggDimDate",
				"requiredweaklycounts, AggDimDate join(reported_year_week == ECDC_Year_Week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinwithDate",
				"joinwithDate select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          week_start_date,",
				"          week_end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeonefiledofecde",
				"requireddailycounts pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     counts = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> pivotdailycounts",
				"removeonefiledofecde pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_year_week,",
				"          population,",
				"          source,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     counts = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotweeklycounts",
				"pivotweeklycounts sort(desc(reported_year_week, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> sortWeakly",
				"pivotdailycounts sort(desc(reported_date, true),",
				"     asc(country, true)) ~> sortDaily",
				"sortWeakly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          {new hospital occupancy_counts} = {Weekly new hospital admissions per 100k_counts},",
				"          {new ICU occupancy_counts} = {Weekly new ICU admissions per 100k_counts},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectweekly",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          hospital_occupancy_counts = {counts_Daily hospital occupancy},",
				"          {ICU _occupancy_counts} = {counts_Daily ICU occupancy},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdaily",
				"selectdaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospitaladmissiondaily.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Dailysink",
				"selectweekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospitaladmissionweakly.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> weaklySink"
			]
		}
	}
}